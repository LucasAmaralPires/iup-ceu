data :Iup = [h] {
    :Action = []
    :Value = []
    :List = [item,state] {
        :Action = []
    }
}

```:pre
#include <iup.h>
int iup_action_cb (Ihandle* h) {
    CEU_Value evt = ceu_create_tuple(1);
    CEU_Value tag = { CEU_VALUE_TAG, {.Tag=CEU_TAG_Iup_Action} };
    ceu_tags_set(evt, tag, 1);
    ceu_tuple_set(&evt.Dyn->Tuple, 0, (CEU_Value) { CEU_VALUE_POINTER, {.Pointer=h} });
    ceux_push(CEU_GLOBAL_X->S, 1, evt);
    int ret = ceu_broadcast_global();
    if (ret != 0) {
        IupExitLoop();
        return IUP_CLOSE;   // TODO
    }
    ceux_pop(CEU_GLOBAL_X->S, 1);
    return IUP_DEFAULT;
}

int iup_value_cb (Ihandle* h) {
    CEU_Value evt = ceu_create_tuple(1);
    CEU_Value tag = { CEU_VALUE_TAG, {.Tag=CEU_TAG_Iup_Value} };
    ceu_tags_set(evt, tag, 1);
    ceu_tuple_set(&evt.Dyn->Tuple, 0, (CEU_Value) { CEU_VALUE_POINTER, {.Pointer=h} });
    ceux_push(CEU_GLOBAL_X->S, 1, evt);
    int ret = ceu_broadcast_global();
    if (ret != 0) {
        IupExitLoop();
        return IUP_CLOSE;   // TODO
    }
    ceux_pop(CEU_GLOBAL_X->S, 1);
    return IUP_DEFAULT;
}

int iup_list_action_cb (Ihandle* h, char *text, int item, int state) {
    CEU_Value evt = ceu_create_tuple(3);
    CEU_Value tag = { CEU_VALUE_TAG, {.Tag=CEU_TAG_Iup_List_Action} };
    ceu_tags_set(evt, tag, 1);
    ceu_tuple_set(&evt.Dyn->Tuple, 0, (CEU_Value) { CEU_VALUE_POINTER, {.Pointer=h} });
    ceu_tuple_set(&evt.Dyn->Tuple, 1, (CEU_Value) { CEU_VALUE_NUMBER,  {.Number=item} });
    ceu_tuple_set(&evt.Dyn->Tuple, 2, (CEU_Value) { CEU_VALUE_BOOL,    {.Bool=state} });
    ceux_push(CEU_GLOBAL_X->S, 1, evt);
    int ret = ceu_broadcast_global();
    if (ret != 0) {
        IupExitLoop();
        return IUP_CLOSE;   // TODO
    }
    ceux_pop(CEU_GLOBAL_X->S, 1);
    return IUP_DEFAULT;
}
```

;; INIT

func iup-loop () {
    `IupMainLoop();`
}

;; GET / SET

func iup-get-pointer (h, name) {
    val s = to-pointer(name)
    `:pointer IupGetAttribute($h.Pointer, $s.Pointer+1)`
}
func iup-get-bool (h, name) {
    val s = to-pointer(name)
    `:bool IupGetInt($h.Pointer, $s.Pointer+1)`
}
func iup-get-number (h, name) {
    val s = to-pointer(name)
    `:number IupGetInt($h.Pointer, $s.Pointer+1)`
}

func iup-set(h, name, value) {
    val s = to-pointer(name)
    ifs value {
        :bool    => `IupSetInt($h.Pointer, $s.Pointer+1, $value.Bool);`
        :number  => if math-floor(value) == value
                        => `IupSetInt($h.Pointer, $s.Pointer+1, $value.Number);`
                        => `IupSetFloat($h.Pointer, $s.Pointer+1, $value.Number);`
        :tag     => `IupSetAttribute($h.Pointer, $s.Pointer+1, $t.Pointer+1);`
            where {
                val t = to-pointer(value)
            }
        else     => `IupSetStrAttribute($h.Pointer, $s.Pointer+1, $v.Pointer);`
            where {
                val v = to-pointer(value)
            }
    }
}

;; CONTROLS

func iup-button (label) {
    val s = to-pointer(label)
    val h = `:pointer IupButton($s.Pointer, NULL)`
    `IupSetCallback($h.Pointer, "ACTION", iup_action_cb);`
    h
}

func iup-label (label) {
    val s = to-pointer(label)
    `:pointer IupLabel($s.Pointer)`
}

func iup-list () {
    val h = `:pointer IupList(NULL)`
    `IupSetCallback($h.Pointer, "ACTION", (Icallback) iup_list_action_cb);`
    h
}

func iup-text () {
    val h = `:pointer IupText(NULL)`
    `IupSetCallback($h.Pointer, "VALUECHANGED_CB", iup_value_cb);`
    h
}

func iup-timer () {
    val h = `:pointer IupTimer()`
    `IupSetCallback($h.Pointer, "ACTION", (Icallback) iup_list_action_cb);`
    h
}


;; CONTAINERS

func iup-hbox () {
    `:pointer IupHbox(NULL)`
}

func iup-vbox () {
    `:pointer IupVbox(NULL)`
}

func iup-append (h, child) {
    `:pointer IupAppend($h.Pointer, $child.Pointer)`
}

;; DIALOGS

func iup-dialog (h) {
    `:pointer IupDialog($h.Pointer)`
}

func iup-show-xy (h, x, y) {
    `:number IupShowXY($h.Pointer, $x.Number, $y.Number)`
}

;; MAIN

`IupOpen(NULL,NULL);`
defer {
    `IupClose();`
}
