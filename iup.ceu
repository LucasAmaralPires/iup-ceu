```:pre
#include <iup.h>

int c_iup_cb (Ihandle* h) {
    CEU_Value hh = { CEU_VALUE_POINTER, {.Pointer=h} };
    CEU_Value* args[1] = { &hh };
    CEU_Block block = { 1, NULL, { NULL, NULL } };
    CEU_Frame frame = { &ceu_mem->iup_cb.Dyn->Proto, &block, NULL, {} };
    ceu_mem->iup_cb.Dyn->Proto.f(&frame, 1, args);
    return IUP_DEFAULT;
}
```

;; INIT

func iup_open () {
    `IupOpen(NULL, NULL);`
}

func iup_close () {
    `IupClose();`
}

func iup_loop () {
    `IupMainLoop();`
}

;; GET / SET

func iup_get_number (h, name) {
    `:number IupGetInt($h.Pointer, ceu_tag_to_string($name.Tag)+1)`
}

func iup_set(h, name, value) {
    var tag = tags(value)
    ifs {
        tag == :bool    -> `IupSetInt($h.Pointer, ceu_tag_to_string($name.Tag)+1, $value.Bool);`
        tag == :number  -> `IupSetFloat($h.Pointer, ceu_tag_to_string($name.Tag)+1, $value.Number);`
        tag == :pointer -> `IupSetAttribute($h.Pointer, ceu_tag_to_string($name.Tag)+1, $value.Pointer);`
        else            -> `IupSetAttribute($h.Pointer, ceu_tag_to_string($name.Tag)+1, $value.Dyn->Vector.mem);`
    }
}

;; CONTROLS

func iup_cb (h) {
    broadcast in :global, h
}

func iup_button (label) {
    var ptr = `:pointer IupButton($label.Dyn->Vector.mem, NULL)`
    `IupSetCallback($ptr.Pointer, "ACTION", (Icallback) c_iup_cb);`
    ptr
}

func iup_label (label) {
    `:pointer IupLabel($label.Dyn->Vector.mem)`
}

func iup_list () {
    var ptr = `:pointer IupList(NULL)`
    `IupSetCallback($ptr.Pointer, "ACTION", (Icallback) c_iup_cb);`
    ptr
}

func iup_text () {
    var ptr = `:pointer IupText(NULL)`
    `IupSetCallback($ptr.Pointer, "VALUECHANGED_CB", (Icallback) c_iup_cb);`
    ptr
}

;; CONTAINERS

func iup_hbox () {
    var ptr = `:pointer IupHbox(NULL)`
}

func iup_append (h, child) {
    `:pointer IupAppend($h.Pointer, $child.Pointer)`
}

;; DIALOGS

func iup_dialog (h) {
    `:pointer IupDialog($h.Pointer)`
}

func iup_show_xy (h, x, y) {
    `:number IupShowXY($h.Pointer, $x.Number, $y.Number)`
}
