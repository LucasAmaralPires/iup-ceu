```:pre
#include <iup.h>

int c_iup_button_cb (Ihandle* h) {
    CEU_Value button = { CEU_VALUE_POINTER, {.Pointer=h} };
    CEU_Value* args[1] = { &button };
    CEU_Block block = { 1, NULL, { NULL, NULL } };
    CEU_Frame frame = { &ceu_mem->iup_button_cb.Dyn->Proto, &block, NULL, {} };
    ceu_mem->iup_button_cb.Dyn->Proto.f(&frame, 1, args);
    return IUP_DEFAULT;
}
int c_iup_text_cb (Ihandle* h) {
    CEU_Value text = { CEU_VALUE_POINTER, {.Pointer=h} };
    CEU_Value* args[1] = { &text };
    ceu_mem->iup_text_cb.Dyn->Proto.f(ceu_frame, 1, args);
    return IUP_DEFAULT;
}
```

;; INIT

func iup_open () {
    `IupOpen(NULL, NULL);`
}

func iup_close () {
    `IupClose();`
}

func iup_loop () {
    `IupMainLoop();`
}

;; GET / SET

func iup_get_int (h, name) {
    `:number IupGetInt($h.Pointer, $name.Pointer)`
}

func iup_set_str(h, name, value) {
    `IupSetAttribute($h.Pointer, $name.Pointer, $value.Pointer);`
}

func iup_set_int(h, name, value) {
    `IupSetInt($h.Pointer, $name.Pointer, $value.Number);`
}

;; CONTROLS

func iup_button_cb (button) {
    broadcast in :global, button
}

func iup_button (label) {
    var ptr = `:pointer IupButton($label.Pointer, NULL)`
    `IupSetCallback($ptr.Pointer, "ACTION", (Icallback) c_iup_button_cb);`
    ptr
}

func iup_text_cb (text) {
    broadcast in :global, text
}

func iup_text () {
    var ptr = `:pointer IupText(NULL)`
    `IupSetCallback($ptr.Pointer, "VALUECHANGED_CB", (Icallback) c_iup_text_cb);`
    ptr
}

;; CONTAINERS

func iup_hbox () {
    var ptr = `:pointer IupHbox(NULL)`
}

func iup_append (h, child) {
    `:pointer IupAppend($h.Pointer, $child.Pointer)`
}

;; DIALOGS

func iup_dialog (h) {
    `:pointer IupDialog($h.Pointer)`
}

func iup_show_xy (h, x, y) {
    `:number IupShowXY($h.Pointer, $x.Number, $y.Number)`
}
