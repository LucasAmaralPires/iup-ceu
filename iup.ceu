native type _{
    #include <iup.h>
}

type Event += <
    Iup = [h: _(Ihandle*)] + <
        Button = ()
        List   = [text:_(char*), item:_int, state:_int]
        Text   = ()
    >
>

func isEventButton: [e:/Event, but:_(Ihandle*)] -> _int {
    if not arg.e\?Iup        { return _0 }
    if not arg.e\!Iup?Button { return _0 }
    return or [
            leq [_0:_long,arg.but::_long],
            leq [arg.e\!Iup!Button.h::_long,arg.but::_long]
           ]
}

func isEventList: [e:/Event, lst:_(Ihandle*)] -> _int {
    if not arg.e\?Iup      { return _0 }
    if not arg.e\!Iup?List { return _0 }
    return or [
            leq [_0:_long,arg.lst::_long],
            leq [arg.e\!Iup!List.h::_long,arg.lst::_long]
           ]
}

func isEventText: [e:/Event, txt:_(Ihandle*)] -> _int {
    if not arg.e\?Iup      { return _0 }
    if not arg.e\!Iup?Text { return _0 }
    return or [
            leq [_0:_long,arg.txt::_long],
            leq [arg.e\!Iup!Text.h::_long,arg.txt::_long]
           ]
}

type Iup = <
    Close    = ()
    Open     = ()
    Loop     = ()

    Message  = [_(char*), _(char*)]
    ShowXY   = [_(Ihandle*), _int, _int]

    Append   = [_(Ihandle*), _(Ihandle*)]

    Get = [h:_(Ihandle*), f:_(char*)] + <
        Float = [v: /_float]
        Int   = [v: /_int]
        Str   = [v: /_(char*)]
    >

    Set = [h:_(Ihandle*), f:_(char*)] + <
        Float = [v:_float]
        Int   = [v:_int]
        Str   = [v:_(char*)]
        StrF  = [v:_(char*), x:_float]
    >

    Button   = [/_(Ihandle*), _(char*)]
    Dialog   = [/_(Ihandle*), _(Ihandle*)]
    HBox     = /_(Ihandle*)
    VBox     = /_(Ihandle*)
    Label    = [/_(Ihandle*), _(char*)]
    List     = /_(Ihandle*)
    Text     = /_(Ihandle*)
>

native type _{
    int iup_cb_button (Ihandle* self) {
        Stack stk = { NULL, NULL, GLOBAL };
        CEU_Event evt = {
            .tag = CEU_EVENT_IUP,
            .Iup = {
                .tag = CEU_EVENT_IUP_BUTTON,
                .Button = {self}
            }
        };
        bcast_event_block(&stk, GLOBAL, (_CEU_Event*)&evt);
        return IUP_DEFAULT;
    }
    int iup_cb_list (Ihandle* self, char *text, int item, int state) {
        Stack stk = { NULL, NULL, GLOBAL };
        CEU_Event evt = {
            .tag = CEU_EVENT_IUP,
            .Iup = {
                .tag = CEU_EVENT_IUP_LIST,
                .List = {self,text,item,state}
            }
        };
        bcast_event_block(&stk, GLOBAL, (_CEU_Event*)&evt);
        return IUP_DEFAULT;
    }
    int iup_cb_text (Ihandle* self) {
        Stack stk = { NULL, NULL, GLOBAL };
        CEU_Event evt = {
            .tag = CEU_EVENT_IUP,
            .Iup = {
                .tag = CEU_EVENT_IUP_TEXT,
                .Text = {self}
            }
        };
        bcast_event_block(&stk, GLOBAL, (_CEU_Event*)&evt);
        return IUP_DEFAULT;
    }
    void output_iup (CEU_Iup arg) {
        switch (arg.tag) {
            case CEU_IUP_CLOSE:
                IupClose();
                break;
            case CEU_IUP_OPEN:
                IupOpen(NULL, NULL);
                break;
            case CEU_IUP_LOOP:
                IupMainLoop();
                break;

            case CEU_IUP_MESSAGE:
                IupMessage(arg.Message._1, arg.Message._2);
                break;
            case CEU_IUP_SHOWXY:
                IupShowXY(arg.ShowXY._1, arg.ShowXY._2, arg.ShowXY._3);
                break;

            case CEU_IUP_APPEND:
                IupAppend(arg.Append._1, arg.Append._2);
                break;

            case CEU_IUP_GET: {
                switch (arg.Get.tag) {
                    case CEU_IUP_GET_FLOAT:
                        *arg.Get.Float._3 = IupGetFloat(arg.Get.Float._1, arg.Get.Float._2);
                        break;
                    case CEU_IUP_GET_INT:
                        *arg.Get.Int._3 = IupGetInt(arg.Get.Int._1, arg.Get.Int._2);
                        break;
                    case CEU_IUP_GET_STR:
                        *arg.Get.Str._3 = IupGetAttribute(arg.Get.Str._1, arg.Get.Str._2);
                        break;
                }
                break;
            }

            case CEU_IUP_SET: {
                switch (arg.Set.tag) {
                    case CEU_IUP_SET_FLOAT:
                        IupSetFloat(arg.Set.Float._1, arg.Set.Float._2, arg.Set.Float._3);
                        break;
                    case CEU_IUP_SET_INT:
                        IupSetInt(arg.Set.Int._1, arg.Set.Int._2, arg.Set.Int._3);
                        break;
                    case CEU_IUP_SET_STR:
                        IupSetAttribute(arg.Set.Str._1, arg.Set.Str._2, arg.Set.Str._3);
                        break;
                    case CEU_IUP_SET_STRF:
                        IupSetStrf(arg.Set.StrF._1, arg.Set.StrF._2, arg.Set.StrF._3, arg.Set.StrF._4);
                        break;
                }
                break;
            }

            case CEU_IUP_BUTTON:
                *arg.Button._1 = IupButton(arg.Button._2, NULL);
                IupSetCallback(*arg.Button._1, "ACTION", (Icallback) iup_cb_button);
                break;
            case CEU_IUP_DIALOG:
                *arg.Dialog._1 = IupDialog(arg.Dialog._2);
                break;
            case CEU_IUP_HBOX:
                *arg.HBox = IupHbox(NULL);
                break;
            case CEU_IUP_VBOX:
                *arg.VBox = IupVbox(NULL);
                break;
            case CEU_IUP_LABEL:
                *arg.Label._1 = IupLabel(arg.Label._2);
                break;
            case CEU_IUP_LIST:
                *arg.List = IupList(NULL);
                IupSetCallback(*arg.List, "ACTION", (Icallback) iup_cb_list);
                break;
            case CEU_IUP_TEXT:
                *arg.Text = IupText(NULL);
                IupSetCallback(*arg.Text, "VALUECHANGED_CB", (Icallback) iup_cb_text);
                break;

            default:
                assert(0 && "missing IUP operation");
        }
    }
}
