native type _{
    #include <iup.h>
}

type Event = <
    Kill = (),
    Task = _uint64_t,
    None = (),
    Iup  = <
        Button = _(Ihandle*)
    >
>

var isEventButton = func [e:/Event, but:_(Ihandle*)] -> _int {
    if not arg.e\?Iup        { return _0 }
    if not arg.e\!Iup?Button { return _0 }
    return eq [arg.e\!Iup!Button::_int,arg.but::_int]
}

type OIup = <
    Close   = (),
    Open    = (),
    Loop    = (),

    Message = [_(char*), _(char*)],
    ShowXY  = [_(Ihandle*), _int, _int],

    Append  = [_(Ihandle*), _(Ihandle*)],
    GetInt  = [_(Ihandle*), _(char*), /_int],
    SetInt  = [_(Ihandle*), _(char*), _int],
    SetStr  = [_(Ihandle*), _(char*), _(char*)],

    Button  = [/_(Ihandle*), _(char*)],
    Dialog  = [/_(Ihandle*), _(Ihandle*)],
    HBox    = /_(Ihandle*),
    Label   = [/_(Ihandle*), _(char*)],
    Text    = /_(Ihandle*)
>

native type _{
    int iup_cb_button (Ihandle* self) {
        Stack stk = { NULL, NULL, GLOBAL };
        Event evt = { EVENT_IUP, .Iup={EVENT_IUP_BUTTON, {.Button=self}} };
        bcast_event_block(&stk, GLOBAL, (_Event*)&evt);
        return IUP_DEFAULT;
    }
    void output_iup (OIup arg) {
        switch (arg.tag) {
            case OIUP_CLOSE:
                IupClose();
                break;
            case OIUP_OPEN:
                IupOpen(NULL, NULL);
                break;
            case OIUP_LOOP:
                IupMainLoop();
                break;

            case OIUP_MESSAGE:
                IupMessage(arg.Message._1, arg.Message._2);
                break;
            case OIUP_SHOWXY:
                IupShowXY(arg.ShowXY._1, arg.ShowXY._2, arg.ShowXY._3);
                break;

            case OIUP_APPEND:
                IupAppend(arg.Append._1, arg.Append._2);
                break;
            case OIUP_GETINT:
                *arg.GetInt._3 = IupGetInt(arg.GetInt._1, arg.GetInt._2);
                break;
            case OIUP_SETINT:
                IupSetInt(arg.SetInt._1, arg.SetInt._2, arg.SetInt._3);
                break;
            case OIUP_SETSTR:
                IupSetAttribute(arg.SetStr._1, arg.SetStr._2, arg.SetStr._3);
                break;

            case OIUP_BUTTON:
                *arg.Button._1 = IupButton(arg.Button._2, NULL);
                IupSetCallback(*arg.Button._1, "ACTION", (Icallback) iup_cb_button);
                break;
            case OIUP_DIALOG:
                *arg.Dialog._1 = IupDialog(arg.Dialog._2);
                break;
            case OIUP_HBOX:
                *arg.HBox = IupHbox(NULL);
                break;
            case OIUP_LABEL:
                *arg.Label._1 = IupLabel(arg.Label._2);
                break;
            case OIUP_TEXT:
                *arg.Text = IupText(NULL);
                break;

            default:
                assert(0 && "missing IUP operation");
        }
    }
}
