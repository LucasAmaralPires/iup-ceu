^"int.ceu"
^"long.ceu"
^"iup.ceu"

output iup OIup.Open

spawn {
    var button: _(Ihandle*) {
        output iup OIup.Button [/button, _("Count")]
        output iup OIup.SetStr [button,  _("SIZE"), _("60")]
    }

    var text: _(Ihandle*) {
        output iup OIup.Text   /text
        output iup OIup.SetStr [text, _("SIZE"),     _("60")]
        output iup OIup.SetStr [text, _("NAME"),     _("TEXT")]
        output iup OIup.SetStr [text, _("READONLY"), _("YES")]
        output iup OIup.SetInt [text, _("VALUE"),    _0]
    }

    var hbox: _(Ihandle*) {
        output iup OIup.HBox   /hbox
        output iup OIup.Append [hbox, text]
        output iup OIup.Append [hbox, button]
        output iup OIup.SetStr [hbox, _("MARGIN"), _("10x10")]
        output iup OIup.SetStr [hbox, _("GAP"),    _("10")]
    }

    var dlg: _(Ihandle*) {
        output iup OIup.Dialog [/dlg, hbox]
        output iup OIup.SetStr [hbox, _("TITLE"), _("Counter")]
    }

    output iup OIup.ShowXY [dlg, _IUP_CENTER, _IUP_CENTER]

    every isEventButton [/evt,button] {
        var v: _int
        output iup OIup.GetInt [text, _("VALUE"), /v]
        output iup OIup.SetInt [text, _("VALUE"), add [v,_1]]
    }
}

output iup OIup.Loop
output iup OIup.Close
