^["@/iup/iup.ceu"]

spawn {

    val glabel = iup.label("Elapsed Time: ")

    val gauge = iup.gauge()
        iup.set(gauge, :MIN, ".1");
        iup.set(gauge, :MAX, "30");
        iup.set(gauge, :VALUE, "30");
        iup.set(gauge, :EXPAND, "HORIZONTAL");
        iup.set(gauge, :SHOWTEXT, "NO");

    val label = iup.label("0.0s")
        iup.set(label, :EXPAND, "HORIZONTAL");

    val vlable = iup.label("Duration: ")

    val iupval = iup.val("HORIZONTAL")
        iup.set(iupval, :EXPAND, "HORIZONTAL");
        iup.set(iupval, :MAX, "60.0");
        iup.set(iupval, :STEP, ".1");
        iup.set(iupval, :VALUE, "30.0");
        iup.set(iupval, :PAGESTEP, ".5");

    val button = iup.button("Reset")
        iup.set(button, :EXPAND, "HORIZONTAL");

    val hbox1 = iup.hbox()
        iup.append(hbox1, glabel)
        iup.append(hbox1, gauge)
        iup.set(hbox1, :MARGIN, "0x0")
        iup.set(hbox1, :ALIGNMENT, "ACENTER")

    val hbox2 = iup.hbox()
        iup.append(hbox2, vlable)
        iup.append(hbox2, iupval)
        iup.set(hbox2, :MARGIN, "0x0")
        iup.set(hbox2, :ALIGNMENT, "ACENTER")

    val vbox = iup.vbox()
        iup.append(vbox,hbox1)
        iup.append(vbox,label)
        iup.append(vbox,hbox2)
        iup.append(vbox,button)
        iup.set(vbox, :MARGIN, "10x10")
        iup.set(vbox, :GAP, "10")

    val dlg = iup.dialog(vbox)
        iup.set(dlg, :TITLE, "Timer")
        iup.set(dlg, :SIZE, "200")

    iup.show-xy(dlg, `:number IUP_CENTER`, `:number IUP_CENTER`)

    var timer = [false, 0] 
    par {
        loop {
            par-or {
                every :Iup.Value | it.h==iupval {
                    val value = iup.get.number(iupval, :VALUE)

                    iup.set(gauge, :MAX, value)

                    if timer[1] < (value*10) {
                        broadcast (:evt [true]) in :global
                    } else {
                        iup.set(gauge, :VALUE, value)
                    }
                }
            } with {
                every :Iup.Action | it.h==button {
                    set timer[1] = 0
                    iup.set(iupval, :VALUE, "30")
                    iup.set(gauge, :MAX, 30)
                    broadcast (:evt [true]) in :global
                }
            }
        }
    } with {
;; Find out why time_passed must be immutable and how to resolve timer[1]
        var timer2 = false
        loop {
            await :evt {
                set timer2 = it[0]
                while timer2 == true {
                    await <100:ms>
                    val value = iup.get.number(iupval, :VALUE)
                    set time_passed = time_passed + 1
                    if time_passed > (value*10) {
                        set timer2 = false
                        `static char str[16]; sprintf(str, "%.2lfs", $value.Number);`
                        iup.set(label, :TITLE, `:pointer str`)
                        iup.set(gauge, :VALUE, `:pointer str`)
                    } else {
                        var temp = time_passed/10
                        `static char str[16]; sprintf(str, "%.2lfs", $temp.Number);`
                        iup.set(label, :TITLE, `:pointer str`)
                        iup.set(gauge, :VALUE, `:pointer str`)
                    }  
                }
            }
        }
    }  
}


iup.loop()