^["iup.ceu"]

iup_open()

func validate_date(day, month, year) {
    var leap? = (year%400==0) or ((year%4==0) and (year%100/=0))
    ifs {
        (day < 1) -> 0
        ((month==2) and      leap?  and (day>29)) -> 0
        ((month==2) and (not leap?) and (day>28)) -> 0
        ((day>30) and ((month==4) or (month==6) or (month==9) or (month==11))) -> 0
        ((day>31) and ((month==1) or (month==3) or (month==5) or (month==7) or
                       (month==8) or (month==10) or (month==12))) -> 0
        else -> 1
    }
}

```:pre
#if 0
int parseDate (char* date, int* day, int* month, int* year) {
    char *part, *ret;
    int count = 1;

    part = strtok(date, ".");
    if (part == NULL) {
        return 0;
    }

    while (part != NULL)
    {
        int len = strlen(part);
        switch (count)
        {
            case 1:
                if (strlen(part) > 2) {
                    return 0;
                }
                *day = strtol(part, &ret, 10);
                if (*ret != '\0') {
                    return 0;
                }
                break;
            case 2:
                if (strlen(part) > 2) {
                    return 0;
                }
                *month = strtol(part, &ret, 10);
                if (*ret != '\0') {
                    return 0;
                }
                break;
            case 3:
                if (strlen(part) != 4) {
                    return 0;
                }
                *year = strtol(part, &ret, 10);
                if (*ret != '\0') {
                    return 0;
                }
                break;
            default:
                return 0;
        }
        count++;
        part = strtok(NULL, ".");
    }

    if (count < 4) {
        return 0;
    }

    return validateDate(*day, *month, *year);
}
#endif
```

spawn {
    var list = iup_list()
        iup_set(list, :EXPAND,   "HORIZONTAL")
        iup_set(list, :DROPDOWN, true)
        iup_set(list, :1,        "one-way flight")
        iup_set(list, :2,        "return flight")
        iup_set(list, :VALUE,    :1)

    var start = iup_text()
        iup_set(start, :EXPAND, "HORIZONTAL")
        iup_set(start, :VALID,  true)
        iup_set(start, :VALUE,  "22.09.1957")
        iup_set(start, :DAY,    "22")
        iup_set(start, :MONTH,  "09")
        iup_set(start, :YEAR,   "1957")

    var end = iup_text()
        iup_set(end, :EXPAND, "HORIZONTAL")
        iup_set(end, :VALID,  true)
        iup_set(end, :VALUE,  "22.09.1957")
        iup_set(end, :DAY,    "22")
        iup_set(end, :MONTH,  "09")
        iup_set(end, :YEAR,   "1957")
        iup_set(end, :ACTIVE, false)

    var button = iup_button("Book")
        iup_set(button, :EXPAND, false)
        iup_set(button, :EXPAND, "HORIZONTAL")

    var vbox = iup_vbox()
        iup_set(vbox, :MARGIN, "10x10")
        iup_set(vbox, :GAP, "10")
        iup_append(vbox, list)
        iup_append(vbox, start)
        iup_append(vbox, end)
        iup_append(vbox, button)

    var dlg = iup_dialog(vbox)
        iup_set(dlg, :TITLE, "Book Flight")

    iup_show_xy(dlg, `:number IUP_CENTER`, `:number IUP_CENTER`)

    while true {
        var act2? = iup_get_bool(end, :ACTIVE)
        var val2? = iup_get_bool(end, :VALID)

        iup_set(end, :BGCOLOR, color) where {
            var color = ((val2? or (not act2?)) and "255 255 255") or "255 0 0"
        }

        await evt_obj?(list) and evt.state
        iup_set(end, :ACTIVE, (evt.item == 2))
    }

```
#if 0
    loop {
        paror {
        } with {
            await isEventText [/evt,_NULL]
            var text = evt!Iup!Text
            var day:   _int
            var month: _int
            var year:  _int
            var date:  _(char*)
            output iup OIup.GetStr [text, _("VALUE"), /date]
            var err: _int = _{parseDate(%date, &%day, &%month, &%year)}
            if err {
                output iup OIup.SetStr [text, _("VALID"), _("NO")];
            } else {
                output iup OIup.SetInt [text, _("DAY"),   day];
                output iup OIup.SetInt [text, _("MONTH"), month];
                output iup OIup.SetInt [text, _("YEAR"),  year];
                output iup OIup.SetStr [text, _("VALID"), _("YES")];
            }
        }
    }
#endif
```
}

iup_loop()
iup_close()
