^["@/iup/iup.ceu"]

data :FName = [nm, snm, id]

;;;
TODO - 
    Refazer a função trim
    Descobrir porque esta surgindo tanto espaço vazio
    LoadList
        Ver como usar uma única variável ao invés de 3 temporarios
    Erro na criação databese com 80
;;;


val MAX_NAMES = 80
val db_names_list :FName = #[]
var db_names_count = 0
var db_names_id = 0

;;;;;;;;;;;;;;;;;;;;;;;;; DATABASE OF NAMES ;;;;;;;;;;;;;;;;;;;;;;;;;

func create_db(name, surname) {
    ;;;
    if db_names_count == 80 {
        error
    }
    ;;;

    set db_names_list[db_names_count] = [name,surname,db_names_id]

    set db_names_count = db_names_count + 1
    set db_names_id = db_names_id + 1
}

;;;;;;;;;;;;;;;;;;;;;;;;; OPERATIONS ;;;;;;;;;;;;;;;;;;;;;;;;;

func strLower(word) {
    var temp_word = ""
    loop c in word {
        if (to.number(c) >= 65) and (to.number(c) <= 90) {
            set temp_word[+] = to.char(to.number(c) + 32)
        } else {
            set temp_word[+] = c
        }
    }
    temp_word
}

func filterName(surname, filter) {
    val temp_surname = strLower(surname)
    val temp_filter = strLower(filter)
    var i = 0
    if(#temp_filter > #temp_surname){
        return(false)
    }
    loop c in temp_filter {
        if (c /= temp_surname[i]) {
            return(false)
        }
        set i = i + 1
    }
    true
}

func trim (word) {
    var trim_word = ""
    var temp_word = ""
    var start_word = false
    var end_word = false
    loop c in word {
        ifs {
            (c /= ' ')  and (start_word == false) {
                set trim_word[+] = c
                set start_word = true
            }
            (c == ' ') and (start_word == true) and (end_word == true){
                set temp_word[+] = c
            }
            (c == ' ') and (start_word == true) {
                set end_word = true
                set temp_word[+] = c
            }
            (c /= ' ')  and (end_word == true) {
                set trim_word = trim_word ++ temp_word
                set trim_word[+] = c
                set temp_word = ""
                set end_word = false
            }
            (start_word == true) and (end_word == false) {
                set trim_word[+] = c
            }
        } 
    }
    trim_word
}

spawn {
    
    val filter = iup.label("Filter Prefix: ")
        iup.set(filter, :NAME, "Filter")

    val text = iup.text()
        iup.set(text, :NAME, "Text")
        iup.set(text, :EXPAND, "HORIZONTAL")
        iup.set(text, :SIZE, "60x")

    val hbox_filter = iup.hbox()
        iup.set(hbox_filter, :ALIGNMENT, "ACENTER")
        iup.append(hbox_filter, filter)
        iup.append(hbox_filter, text)

    val hbox_top = iup.hbox()
        iup.set(hbox_top, :HOMOGENEOUS, "YES")
        iup.append(hbox_top, hbox_filter)
        iup.append(hbox_top, `:pointer IupFill()`)

    val name = iup.label("Name:")
        iup.set(name, :NAME, "Name")
        iup.set(name, :SIZE, "35")

    val name_text = iup.text()
        iup.set(name_text, :NAME, "Text_Name")
        iup.set(name_text, :EXPAND, "HORIZONTAL")
        iup.set(name_text, :SIZE, "60")
        iup.set(name_text, :NC, "80")

    val hbox_name = iup.hbox()
        iup.set(hbox_name, :ALIGNMENT, "ACENTER")
        iup.append(hbox_name, name)
        iup.append(hbox_name, name_text)

    val surname = iup.label("Surname:")
        iup.set(surname, :NAME, "Surname")
        iup.set(surname, :SIZE, "35")

    val surname_text = iup.text()
        iup.set(surname_text, :NAME, "Text_Surname")
        iup.set(surname_text, :EXPAND, "HORIZONTAL")
        iup.set(surname_text, :SIZE, "60")
        iup.set(surname_text, :NC, "80")

    val hbox_surname = iup.hbox()
        iup.set(hbox_surname, :ALIGNMENT, "ACENTER")
        iup.append(hbox_surname, surname)
        iup.append(hbox_surname, surname_text)

    val vbox_fullname = iup.vbox()
        iup.append(vbox_fullname,hbox_name)
        iup.append(vbox_fullname,hbox_surname)

    val list = iup.list()
        iup.set(list, :NAME, "list_names")
        iup.set(list, :EXPAND, "YES")
        iup.set(list, :SIZE, "60x")
        iup.set(list, :VISIBLELINES, "6")

    val hbox_n_s_l = iup.hbox()
        iup.set(hbox_n_s_l, :HOMOGENEOUS, "YES")
        iup.append(hbox_n_s_l, list)
        iup.append(hbox_n_s_l, vbox_fullname)

    val button_create = iup.button("Create")
        iup.set(button_create, :NAME, "B_Create")
        iup.set(button_create, :SIZE, "30")

    val button_update = iup.button("Update")
        iup.set(button_update, :NAME, "B_Update")
        iup.set(button_update, :SIZE, "30")
        iup.set(button_update, :ACTIVE, "NO")

    val button_delete = iup.button("Delete")
        iup.set(button_delete, :NAME, "B_Delete")
        iup.set(button_delete, :SIZE, "30")
        iup.set(button_delete, :ACTIVE, "NO")

    val hbox_button = iup.hbox()
        iup.append(hbox_button, button_create)
        iup.append(hbox_button, button_update)
        iup.append(hbox_button, button_delete)

    val vbox_final = iup.vbox()
        iup.set(vbox_final, :MARGIN, "10x10")
        iup.append(vbox_final, hbox_top)
        iup.append(vbox_final, hbox_n_s_l)
        iup.append(vbox_final, hbox_button)

    val dlg = iup.dialog(vbox_final)
        iup.set(dlg, :TITLE, "CRUD")
        iup.set(dlg, :GAP, "10")

    iup.show-xy(dlg, `:number IUP_CENTER`, `:number IUP_CENTER`)

    var loadupdate

    loop {
        set loadupdate = par-or {
            await :Iup.Action | it.h==button_create {
                val name_value = iup.get.pointer(name_text, :VALUE) -> to-string -> trim
                val surname_value = iup.get.pointer(surname_text, :VALUE) -> to-string -> trim
                create_db(name_value, surname_value)
                iup.set(name_text, :VALUE, nil)
                iup.set(surname_text, :VALUE, nil)
            }
            [true,true]
        } with {
            await :Iup.Action | it.h==button_update {
                val id_val = iup.get.number(list, :VALUE)
                val id = iup.get.id(list, :ID, id_val)
                val name_value = iup.get.pointer(name_text, :VALUE) -> to-string -> trim
                val surname_value = iup.get.pointer(surname_text, :VALUE) -> to-string -> trim

                set db_names_list[id][0] = name_value
                set db_names_list[id][1] = surname_value

                iup.set(name_text, :VALUE, nil)
                iup.set(surname_text, :VALUE, nil)
            }
            [true,true]
        } with {
            await :Iup.Action | it.h==button_delete {
                val id_val = iup.get.number(list, :VALUE)
                val id = iup.get.id(list, :ID, id_val)
                val name_value = iup.get.pointer(name_text, :VALUE) -> to-string -> trim
                val surname_value = iup.get.pointer(surname_text, :VALUE) -> to-string -> trim

                loop i in {id => (db_names_count-1){ {
                    set db_names_list[i] = db_names_list[i + 1]
                    set db_names_list[i][2] = db_names_list[i][2] - 1
                }
                set db_names_count = db_names_count - 1
                set db_names_id = db_names_id - 1

                iup.set(name_text, :VALUE, nil)
                iup.set(surname_text, :VALUE, nil)
            }
            [true,true]
        } with {
            await :Iup.Value | it.h==text {}
            [true,false]
        } with {
            await :Iup.Value | it.h==list {
                val id_val = iup.get.number(list, :VALUE)
                val id = iup.get.id(list, :ID, id_val)
                iup.set(name_text, :VALUE, db_names_list[id][0])
                iup.set(surname_text, :VALUE, db_names_list[id][1])
            }
            [false,true]
        }


        if loadupdate[0] == true {   
            val filter_text = iup.get.pointer(text,:VALUE) -> to-string -> trim
            var fil = true
            var j = 1
            var temp_surname
            var temp_name
            var temp_id
            ;;    var temp :FName;
            
            if (#filter_text == 0) {
                set fil = false
            }

            iup.set(list, :1, nil)

            loop i in {1 => db_names_count} {
                set temp_id = db_names_list[i-1][2]
                set temp_surname = db_names_list[i-1][1]
                set temp_name = db_names_list[i-1][0]
                if ((not fil) or (filterName(temp_surname, filter_text))) {
                    `IupSetStrfId($list.Pointer, "", $j.Number, "%s, %s", $temp_surname.Dyn->Vector.buf, $temp_name.Dyn->Vector.buf);`
                    `IupSetIntId($list.Pointer, "ID", $j.Number, $temp_id.Number);`
                    set j = j + 1
                }        
            }
            iup.set(list, :VALUE, nil)
        }
        if loadupdate[1] == true {
            if iup.get.number(list, :VALUE) == false {
                iup.set(button_update, :ACTIVE, "NO")
                iup.set(button_delete, :ACTIVE, "NO")
            } else {
                iup.set(button_update, :ACTIVE, "YES")
                iup.set(button_delete, :ACTIVE, "YES")
            }
        }
    }
}

iup.loop()

