^["@/iup/iup.ceu"]

;;;
TODO - 
    Criar a funcionalidade dos botões
    Descobrir porque esta surgindo tanto espaço vazio
;;;


spawn {
    
    val filter = iup.label("Filter Prefix: ")
        iup.set(filter, :NAME, "Filter")

    val text = iup.text()
        iup.set(text, :NAME, "Text")
        iup.set(text, :EXPAND, "HORIZONTAL")
        iup.set(text, :SIZE, "60x")

    val hbox_filter = iup.hbox()
        iup.set(hbox_filter, :ALIGNMENT, "ACENTER")
        iup.append(hbox_filter, filter)
        iup.append(hbox_filter, text)

    val hbox_top = iup.hbox()
        iup.set(hbox_top, :HOMOGENEOUS, "YES")
        iup.append(hbox_top, hbox_filter)
        iup.append(hbox_top, `:pointer IupFill()`)

    val name = iup.label("Name:")
        iup.set(name, :NAME, "Name")
        iup.set(name, :SIZE, "35")

    val name_text = iup.text()
        iup.set(name_text, :NAME, "Text_Name")
        iup.set(name_text, :EXPAND, "HORIZONTAL")
        iup.set(name_text, :SIZE, "60")
        iup.set(name_text, :NC, "80")

    val hbox_name = iup.hbox()
        iup.set(hbox_name, :ALIGNMENT, "ACENTER")
        iup.append(hbox_name, name)
        iup.append(hbox_name, name_text)

    val surname = iup.label("Surname:")
        iup.set(surname, :NAME, "Surname")
        iup.set(surname, :SIZE, "35")

    val surname_text = iup.text()
        iup.set(surname_text, :NAME, "Text_Surname")
        iup.set(surname_text, :EXPAND, "HORIZONTAL")
        iup.set(surname_text, :SIZE, "60")
        iup.set(surname_text, :NC, "80")

    val hbox_surname = iup.hbox()
        iup.set(hbox_surname, :ALIGNMENT, "ACENTER")
        iup.append(hbox_surname, surname)
        iup.append(hbox_surname, surname_text)

    val vbox_fullname = iup.vbox()
        iup.append(vbox_fullname,hbox_name)
        iup.append(vbox_fullname,hbox_surname)

    val list = iup.list()
        iup.set(list, :NAME, "list_names")
        iup.set(list, :EXPAND, "YES")
        iup.set(list, :SIZE, "60x")
        iup.set(list, :VISIBLELINES, "6")

    val hbox_n_s_l = iup.hbox()
        iup.set(hbox_n_s_l, :HOMOGENEOUS, "YES")
        iup.append(hbox_n_s_l, list)
        iup.append(hbox_n_s_l, vbox_fullname)

    val button_create = iup.button("Create")
        iup.set(button_create, :NAME, "B_Create")
        iup.set(button_create, :SIZE, "30")

    val button_update = iup.button("Update")
        iup.set(button_update, :NAME, "B_Update")
        iup.set(button_update, :SIZE, "30")
        iup.set(button_update, :ACTIVE, "NO")

    val button_delete = iup.button("Delete")
        iup.set(button_delete, :NAME, "B_Delete")
        iup.set(button_delete, :SIZE, "30")
        iup.set(button_delete, :ACTIVE, "NO")

    val hbox_button = iup.hbox()
        iup.append(hbox_button, button_create)
        iup.append(hbox_button, button_update)
        iup.append(hbox_button, button_delete)

    val vbox_final = iup.vbox()
        iup.set(vbox_final, :MARGIN, "10x10")
        iup.append(vbox_final, hbox_top)
        iup.append(vbox_final, hbox_n_s_l)
        iup.append(vbox_final, hbox_button)

    val dlg = iup.dialog(vbox_final)
        iup.set(dlg, :TITLE, "CRUD")
        iup.set(dlg, :GAP, "10")

    iup.show-xy(dlg, `:number IUP_CENTER`, `:number IUP_CENTER`)

}

iup.loop()

;;;
int main(int argc, char **argv)
{
  /* Registers callbacks */
  IupSetCallback(btn_create, "ACTION", (Icallback)btn_create_cb);
  IupSetCallback(btn_update, "ACTION", (Icallback)btn_update_cb);
  IupSetCallback(btn_delete, "ACTION", (Icallback)btn_delete_cb);
  IupSetCallback(lst_names, "VALUECHANGED_CB", (Icallback)lst_valuechanged_cb);
  IupSetCallback(txt_filter, "VALUECHANGED_CB", (Icallback)txt_valuechanged_cb);
 }

;;;
