^["@/iup/iup.ceu"]

data :Circle = [x, y, r, id]

data :Operation = [type, circle]

;;;
    TODO
        Add second callback to iup.ceu
        All the logic of the program
;;;

val DEF_RADIUS = 30
val MAX_CIRCLES = 80
val MAX_RADIUS = 100
val MAX_OPERATIONS = 200

val circlesList :Circle = #[]
var circlesCount = 0
var lastId = 0

var operationsList :Operation = #[]
var operationsCount = 0
var currentOperation = -1

enum :OP {
    Create, Remove, Update
}

func circles_pick(x,y) {
    var min_r = MAX_RADIUS
    var id = -1

    loop i in {0 => circlesCount{ {
        val dx = circlesList[i][0] - x;
        val dy = circlesList[i][1] - y;

        var r = (dx * dx) + (dy * dy)
        set r = r**0.5

        if (r < circlesList[i][2]) {
            ifs { 
                (id < 0) => set id = circlesList[i][3]
                (r < min_r) => set id = circlesList[i][3]
            } 
        }
    }
}

spawn {
    
    val undoButton = iup.button("UNDO")
        iup.set(undoButton, :SIZE, "60")

    val redoButton = iup.button("REDO")
        iup.set(redoButton, :SIZE, "60")

    iup.set(undoButton, :ACTIVE, "NO")
    iup.set(redoButton, :ACTIVE, "NO")

    val canvas = iup.canvas()
        iup.set(canvas, :EXPAND, "YES")
        iup.set(canvas, :HIGHLIGHTEDCIRCLE, -1)

    val hbox = iup.hbox()
        iup.append(hbox, iup.fill())
        iup.append(hbox, undoButton)
        iup.append(hbox, redoButton)
        iup.append(hbox, iup.fill())

    val vbox = iup.vbox()
        iup.append(vbox, hbox)
        iup.append(vbox, canvas)
        iup.set(vbox, :NMARGIN, "10x10")
        iup.set(vbox, :GAP, "10")

    val dlg = iup.dialog(vbox)
        iup.set(dlg, :TITLE, "Circle Drawer")
        iup.set(dlg, :SIZE, "300x150")

    iup.show-xy(dlg, `:number IUP_CENTER`, `:number IUP_CENTER`)

;;;
    loop {
        watching <nenhum-foco> {
            var o = <await-foco>
            loop {
                set o = watching <await-mude-foco> {
                    ;; faca acoes em "o" com o foco
                }
            }
        }
    }

    par-or {
        await <5:s>
    } with {
        ...
    }

    watching |... {
        ...
    }
;;;

    par {
        every :Iup.Button | it.h==canvas {
            if (it.but == :Mouse-Left) and (it.pressed == true) {
                ;;;
                if (circlesCount == MAX_CIRCLES)
                    return -1;
                ;;;

                set circlesList[circlesCount] = [it.x, it.y, DEF_RADIUS, lastId]
                set circlesCount = circlesCount + 1
                set lastId = lastId + 1

                circles_pick(it.x, it.y)

                ;;;
                if (operationsCount == MAX_OPERATIONS)
                    return -1;
                ;;;
                if (currentOperation < (operationsCount - 1)) {
                    set operationsCount = currentOperation + 1
                }

                ;; mudar circlesList para a função circle_find na linha abaixo
                set operationsList[operationsCount] = [0, circlesList[lastId-1]]
                set currentOperation = operationsCount
                set operationsCount = operationsCount + 1
            }
            iup.draw-update(canvas)
        }
    } with {
        every :Iup.Action | it.h==canvas {
            iup.draw-begin(canvas)
            val [width, height] = iup.draw-getsize(canvas)

            iup.set(canvas, :DRAWCOLOR, "255 255 255")
            iup.set(canvas, :DRAWSTYLE, "FILL");
            iup.draw-rectangle(canvas, 0, 0, width-1, height -1)

            iup.set(canvas, :DRAWCOLOR, "0 0 0")
            iup.set(canvas, :DRAWSTYLE, "STROKE");

            loop i in {0 => circlesCount{ {
                iup.draw-arc(canvas, circlesList[i][0] - circlesList[i][2],
                                     circlesList[i][1] - circlesList[i][2],
                                     circlesList[i][0] + circlesList[i][2],
                                     circlesList[i][1] + circlesList[i][2],0,360)

            }

            iup.draw-end(canvas)
        }       
    }
}

iup.loop()

