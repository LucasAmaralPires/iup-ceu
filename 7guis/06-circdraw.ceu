^["@/iup/iup.ceu"]

data :Circle = [x, y, r, id]

data :Operation = [type, circle]

;;;
    TODO
        Add the operation control
        Add the redo button
        Add the undo button
        Change highlight logic (remove global variable)
        Add find logic
        Add second dialogue
        Create and modify circle_find where appropriate
        Discover why circle.r is updating
;;;

val DEF_RADIUS = 30
val MAX_CIRCLES = 80
val MAX_RADIUS = 100
val MAX_OPERATIONS = 200

val circlesList :Circle = #[]
var circlesCount = 0
var lastId = 0

var operationsList :Operation = #[]
var operationsCount = 0
var currentOperation = -1

enum :OP {
    Create, Remove, Update
}

func circles_find (id) {
    val found = loop i in {0 => circlesCount{ {
        if (circlesList[i][3] == id){
            break(i)
        }
    }
    circlesList[found]
}

func circles_update (circle :Circle) {
    val found = loop i in {0 => circlesCount{ {
        if (circlesList[i][3] == circle.id){
            break(i)
        }
    }
    set circlesList[found][2] = circle.r
}

func circles_pick(x,y) {
    var min_r = MAX_RADIUS
    var id = -1

    loop i in {0 => circlesCount{ {
        val dx = circlesList[i][0] - x;
        val dy = circlesList[i][1] - y;

        var r = (dx * dx) + (dy * dy)
        set r = r**0.5

        if (r < circlesList[i][2]) {
            ifs { 
                (id < 0) {
                    set id = circlesList[i][3]
                    set min_r = r
                }
                (r < min_r) => set id = circlesList[i][3]
            } 
        }
    }
    id
}

func op_add(type, circle :Circle) {
;;;
    if (operationsCount == MAX_OPERATIONS)
        return -1;
;;;
    if (currentOperation < (operationsCount - 1)) {
        set operationsCount = currentOperation + 1
    }

    println(type)

    set operationsList[operationsCount] = [type, circle]
    set currentOperation = operationsCount
    set operationsCount = operationsCount + 1

}

func update_buttons(button_undo, button_redo) {
    if(currentOperation < 0) {
        iup.set(button_undo, :ACTIVE, "NO")
    } else {
        iup.set(button_undo, :ACTIVE, "YES")
    }

    if((currentOperation + 1) < operationsCount) {
        iup.set(button_redo, :ACTIVE, "NO")
    } else {
        iup.set(button_redo, :ACTIVE, "YES")
    }
}

spawn {
    
    val undoButton = iup.button("UNDO")
        iup.set(undoButton, :SIZE, "60")
        iup.set(undoButton, :ACTIVE, "NO")

    val redoButton = iup.button("REDO")
        iup.set(redoButton, :SIZE, "60")
        iup.set(redoButton, :ACTIVE, "NO")

    val canvas = iup.canvas()
        iup.set(canvas, :EXPAND, "YES")
        iup.set(canvas, :HIGHLIGHTEDCIRCLE, -1)

    val hbox = iup.hbox()
        iup.append(hbox, iup.fill())
        iup.append(hbox, undoButton)
        iup.append(hbox, redoButton)
        iup.append(hbox, iup.fill())

    val vbox = iup.vbox()
        iup.append(vbox, hbox)
        iup.append(vbox, canvas)
        iup.set(vbox, :NMARGIN, "10x10")
        iup.set(vbox, :GAP, "10")

    val dlg = iup.dialog(vbox)
        iup.set(dlg, :TITLE, "Circle Drawer")
        iup.set(dlg, :SIZE, "300x150")

    iup.show-xy(dlg, `:number IUP_CENTER`, `:number IUP_CENTER`)

    val lbl = iup.label()
        iup.set(lbl, :EXPAND, "HORIZONTAL")
        iup.set(lbl, :TITLE, "Adjust the diameter of the circle at (100, 100)")

    val vl = iup.val("HORIZONTAL")
        iup.set(vl, :EXPAND, "HORIZONTAL")
        iup.set(vl, :MIN, "0")
        iup.set(vl, :MAX, MAX_RADIUS)

    val box = iup.vbox()
        iup.append(box,iup.fill())
        iup.append(box,lbl)
        iup.append(box,vl)
        iup.append(box,iup.fill())
        iup.set(box, :ALIGMENT, "ACENTER")
        iup.set(box, :NMARGIN, "10x10")

    val dlg_config = iup.dialog(box)
        iup.set(dlg_config, :TITLE, "Circle Config")

;; search for possible removal of following variable
    var circleid = -1

    par {
        every :Iup.Button | it.h==canvas {
            val id = circles_pick(it.x, it.y)
            ifs {
                ((it.but == :Mouse-Left) and (it.pressed == true)) {
                    if (id >= 0) {
                        iup.set(canvas, :HIGHLIGHTEDCIRCLE, id)
                    } else {
                        ;;;
                        if (circlesCount == MAX_CIRCLES)
                            return -1;
                        ;;;

                        set circlesList[circlesCount] = [it.x, it.y, DEF_RADIUS, lastId]
                        set circlesCount = circlesCount + 1
                        op_add(:OP-Create, circles_find(lastId))

                        set lastId = lastId + 1

                        update_buttons(undoButton, redoButton)

                    }
                    iup.draw-update(canvas)
                }
                ((it.but == :Mouse-Right) and (it.pressed == true)) {
                    val hl = iup.get.number(canvas, :HIGHLIGHTEDCIRCLE)
                    if ((id /= -1) and (id == hl)) {
                        val circle :Circle = circles_find(id)
                        val old_r = circle.r
                        val x = circle.x
                        val y = circle.y
                        println(circle)
                        `IupSetStrf($lbl.Pointer, "TITLE", "Adjust the diameter of the circle at (%d, %d)", (int)$x.Number, (int)$y.Number);`
                        iup.set(vl, :VALUE, circle.r)
                        set circleid = circle.id

                        iup.popup(dlg_config)

                        val new_r = iup.get.number(vl, :VALUE)

                        if (new_r /= old_r) {
                            println("AQUI")
                            op_add(:OP-Update, circle)
                            set circle.r = new_r
                            op_add(:OP-Update, circle)
                            update_buttons(undoButton, redoButton);
                        }
                    }
                }
            }
        }
    } with {
        every :Iup.Action | it.h==canvas {
            iup.draw-begin(canvas)
            val [width, height] = iup.draw-getsize(canvas)

            iup.set(canvas, :DRAWCOLOR, "255 255 255")
            iup.set(canvas, :DRAWSTYLE, "FILL");
            iup.draw-rectangle(canvas, 0, 0, width-1, height -1)

            iup.set(canvas, :DRAWCOLOR, "0 0 0")
            iup.set(canvas, :DRAWSTYLE, "STROKE");

            val hl = iup.get.number(canvas, :HIGHLIGHTEDCIRCLE)

            loop i in {0 => circlesCount{ {
                if (hl == circlesList[i][3]) {
                    iup.set(canvas, :DRAWCOLOR, "128 128 128")
                    iup.set(canvas, :DRAWSTYLE, "FILL")
                } else {
                    iup.set(canvas, :DRAWCOLOR, "0 0 0")
                    iup.set(canvas, :DRAWSTYLE, "STROKE")
                }
                iup.draw-arc(canvas, circlesList[i][0] - circlesList[i][2],
                                     circlesList[i][1] - circlesList[i][2],
                                     circlesList[i][0] + circlesList[i][2],
                                     circlesList[i][1] + circlesList[i][2],0,360)
            }

            iup.draw-end(canvas)
        }       
    } with {
        every :Iup.Value | it.h==vl {
            val r = iup.get.number(vl, :VALUE)
            val circle :Circle = circles_find(circleid)
            set circle.r = r
            circles_update(circle)
            iup.draw-update(canvas)
        }       
    } with {
        every :Iup.Action | it.h==undoButton {
            println(operationsList)
            update_buttons(undoButton, redoButton)
            iup.draw-update(canvas)
        }       
    } with {
        every :Iup.Action | it.h==redoButton {
            
            update_buttons(undoButton, redoButton)
            iup.draw-update(canvas)
        }       
    }
}

iup.loop()

