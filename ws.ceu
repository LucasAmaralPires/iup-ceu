data :WS = [
    server,
    client, send
]

data :Ws = [n,v]

var N = 0

```:pre
#include <stdlib.h>
#include <ws.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include "toyws.h"

struct tws_ctx ctx;
void onopen(ws_cli_conn_t client)
{
	char *cli, *port;
	cli  = ws_getaddress(client);
	port = ws_getport(client);
	printf("Connection opened, addr: %s, port: %s\n", cli, port);
}

void onclose(ws_cli_conn_t client)
{
	char *cli;
	cli = ws_getaddress(client);
	printf("Connection closed, addr: %s\n", cli);
}

void onmessage(ws_cli_conn_t client, const unsigned char *msg, uint64_t size, int type)
{
	char *cli;
    usleep(500000); // TODO entr 100ms e 500ms

	cli = ws_getaddress(client);
	printf("I receive a message: %s (size: %" PRId64 ", type: %d), from: %s\n", msg, size, type, cli);

    CEU_Value args[] = {
        { CEU_VALUE_NUMBER,  {.Number=msg[0]} },
        { CEU_VALUE_NUMBER,  {.Number=msg[1]} }
    };
    CEU_Value evt = ceu_create_tuple(1, 2, args CEU_LEX_X(COMMA 1));
    ceu_gc_inc_val(evt);

    CEU_Value tag = { CEU_VALUE_TAG, {.Tag=CEU_TAG_Ws} };
    ceu_tag_set(tag, evt);

    ceu_broadcast_global(evt);
    ceu_gc_dec_val(evt);

}
```

val ws :WS = group {

    ;; Server

    func x-ws-server () {
        ```
    	ws_socket(&(struct ws_server){
		.host = "0.0.0.0",
		.port = 8080,
		.thread_loop   = 1,
		.timeout_ms    = 1000,
		.evs.onopen    = &onopen,
		.evs.onclose   = &onclose,
		.evs.onmessage = &onmessage
	    });
        ```
    }

    ;; Client

    func x-ws-client () {
        ```
        	if (tws_connect(&ctx, "127.0.0.1", 8080) < 0)
        		fprintf(stderr, "Unable to connect!\n");
        ```
    }

    func x-ws-send(v) {
        val n = N
        set N = N + 1
        ```
        char msg[2] = { $n.Number, $v.Number };
        tws_sendframe(&ctx, msg, 2, FRM_TXT);
        ```
        n
    }

    [
        x-ws-server,
        x-ws-client, x-ws-send
    ]
}
